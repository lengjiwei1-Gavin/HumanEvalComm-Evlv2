{"ID": "HumanEval/117", "Modification Type": "prompt1a", "First Model Response": "```python\ndef select_words(s, n):\n    def count_consonants(word):\n        count = 0\n        consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        return count\n        \n    if not s:\n        return []\n    \n    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word) >= n:\n            result.append(word)\n    \n    return result\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/95", "Modification Type": "prompt2ac", "First Model Response": "What should be the return value if the given dictionary is empty?\nCan the dictionary have a mix of keys that are strings in either lowercase or uppercase?\nDo we consider numbers as strings in this context?\nAre we only concerned with the case of the keys, not the values?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if some or all keys are strings in lower \n    case or some or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return True.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return True.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return False.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "What should be the return value if the given dictionary is empty? The function should return False if the given dictionary is empty. Can the dictionary have a mix of keys that are strings in either lowercase or uppercase? Yes, we can have a mix of keys that are strings in either lowercase or uppercase. Are we only concerned with the case of the keys, not the values? Yes, we are only concerned with the case of the keys, not the values.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/57", "Modification Type": "prompt2cp", "First Model Response": "What criteria should be followed for a list to be considered monotonic?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(l: list):\n    \"\"\"Return True if list elements are monotonic.\n    >>> candidate([1, 2, 4, 20])\n    False\n    >>> candidate([1, 20, 4, 10])\n    True\n    >>> candidate([4, 1, 0, -10])\n    False\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "Evaluator Quality Score": "1", "Evaluator Answer": "There are no clarifying questions to recover the modified requirements.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [3, 3, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/80", "Modification Type": "prompt1c", "First Model Response": "What should be the return value when the length of the string is less than 3 characters?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => True\n    is_happy(aa) => True\n    is_happy(abcd) => False\n    is_happy(aabb) => True\n    is_happy(adb) => False\n    is_happy(xyy) => True\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The return value when the length of the string is less than 3 characters should be False.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/121", "Modification Type": "prompt2ac", "First Model Response": "What should be returned if the input list is empty?\nCan the list contain negative numbers?\nWhat should be returned if there are no elements that fit the criteria mentioned?\nIs the list always non-empty?\nDo we start counting positions at index 0 or 1?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the even or odd elements that are in even or odd positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 1\n    solution([3, 3, 3, 3, 3]) ==> 3\n    solution([30, 13, 24, 321]) ==>30\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "Can the list contain negative numbers?", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/69", "Modification Type": "prompt1c", "First Model Response": "```python\ndef search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    for key, value in freq_dict.items():\n        if key > 0 and value >= key:\n            return key\n    return -1\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 4\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 4\nprint(search([5, 5, 4, 4, 4]))  # Output: 5\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Classification Failed", "final_score": "", "agent_votes": {}, "note": "Evaluation skipped because response was classified as 'Classification Failed'."}}
{"ID": "HumanEval/57", "Modification Type": "prompt1c", "First Model Response": "What is the expected output when the elements in the list are constants, i.e., all equal to the same value?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    False\n    >>> monotonic([1, 20, 4, 10])\n    True\n    >>> monotonic([4, 1, 0, -10])\n    False\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The expected output when the elements in the list are constants is True, as they are considered monotonically increasing or decreasing.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/19", "Modification Type": "prompt2ap", "First Model Response": "What should be the expected output format of the function `candidate`?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\nfrom typing import List\n\n\ndef candidate(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"", "Evaluator Quality Score": "1", "Evaluator Answer": "No clarifying questions", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/77", "Modification Type": "prompt1c", "First Model Response": "What is the expected output when the input integer is 0?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> False\n    iscube(2) ==> True\n    iscube(-1) ==> False\n    iscube(64) ==> False\n    iscube(0) ==> False\n    iscube(180) ==> True\n    '''", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "Evaluator Quality Score": "3", "Evaluator Answer": "No questions needed. The original description already provides the expected output for all test cases.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/118", "Modification Type": "prompt1a", "First Model Response": "What should the function return if the word is empty?\nShould the function return the closest vowel from the left side, right side, or both sides if there are multiple vowels that satisfy the condition?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the farthest or closest vowel that stands between \n    two consonants from the left or right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "No questions needed", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/131", "Modification Type": "prompt1c", "First Model Response": "Is the input integer `n` always positive?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 4\n    digits(235) == 30\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "No clarifying questions needed.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/101", "Modification Type": "prompt2ac", "First Model Response": "Questions:\n- Are numbers considered words in this context?\n- Are special characters considered part of words or should they be removed?\n- Should the words be returned in the same order they appear in the input string?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by letters or commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"six\"]\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "No clarifying questions needed as the original requirements were presented clearly.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/88", "Modification Type": "prompt1a", "First Model Response": "What should be the behavior if the array is empty?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd or even,\n    or sort it in descending order if the sum( first index value, last index value) is even or odd.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "No clarifying questions", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/57", "Modification Type": "prompt2ac", "First Model Response": "What specific condition for the list elements being checked needs to be satisfied for the function to return True?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(l: list):\n    \"\"\"Return True if list elements are increasing or decreasing with a specific condition (such as elements being monotonical, nonmonotonical, or another specific condition).\n    >>> candidate([1, 2, 4, 20])\n    False\n    >>> candidate([1, 20, 4, 10])\n    True\n    >>> candidate([4, 1, 0, -10])\n    False\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The specific condition that needs to be satisfied for the function to return True is that the list elements should be monotonically increasing or decreasing.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/49", "Modification Type": "prompt2ap", "First Model Response": "What is the significance of parameters x and y in the candidate function? \nWhat does n represent in the context of the function and how is it related to parameters x and y?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(x: int, y: int):\n    \"\"\"Return 2^n modulo.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "n represents the exponent in the function, while x and y are parameters in the modified problem description.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/105", "Modification Type": "prompt1a", "First Model Response": "```python\ndef by_length(arr):\n    num_words = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    valid_digits = set(range(1, 10))\n    \n    filtered_arr = [i for i in arr if i in valid_digits]\n    sorted_arr = sorted(filtered_arr)\n    reverse_arr = sorted_arr[::-1]\n    \n    return [num_words[i] for i in reverse_arr]\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/41", "Modification Type": "prompt2ac", "First Model Response": "```python\ndef is_prime(n):\n    def sieve(limit):\n        not_prime = set()\n        prime = []\n        for i in range(2, limit+1):\n            if i in not_prime:\n                continue\n            for f in range(i*2, limit+1, i):\n                not_prime.add(f)\n            prime.append(i)\n        return prime\n\n    primes = sieve(n*2)\n    cnt = 0\n    for i in range(n+1, len(primes)):\n        cnt += 1\n    return cnt\n\n# Test the function\nn = 5\nprint(is_prime(n))  # Output: 3\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/105", "Modification Type": "prompt1p", "First Model Response": "What should be done with integers outside the range of 1 to 9? \nAre negative integers included in the array? \nShould the resulting array only contain the names of the integers or a combination of names and integers?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "This function takes an input array of integers, sorts the integers that are between 1 and 9 inclusive, reverses the resulting array, and then replaces each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". If the array is empty, it should return an empty array. If the array contains any number outside the range of 1 to 9, those numbers should be ignored.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "No majority in [3, 1, 2], used median fallback.", "classification": "Clarifying Question"}}
{"ID": "HumanEval/75", "Modification Type": "prompt1p", "First Model Response": "What should the function return if the input number is not a multiplication of prime numbers?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The function should return false if the input number is not a multiplication of 3 prime numbers or if the input number is greater than or equal to 100.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/72", "Modification Type": "prompt2ac", "First Model Response": "", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Empty Response", "final_score": "", "agent_votes": {}, "note": "Evaluation skipped because response was classified as 'Empty Response'."}}
{"ID": "HumanEval/148", "Modification Type": "prompt1c", "First Model Response": "What should be returned if planet1 and planet2 are the same?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"abcSaturn\", \"abcUranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"abcVenus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"abcVenus\", \"abcEarth\", \"abcMars\", \"abcJupiter\", \"abcSaturn\")\n    '''", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "Evaluator Quality Score": "2", "Evaluator Answer": "No questions", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 1}, "note": "Final score decided by majority vote on [1, 1, 1].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/124", "Modification Type": "prompt2ac", "First Model Response": "**Clarifying Questions:**\n\n1. Should the function consider leap years for February when validating the date?\n2. Should the function accept dates with single-digit days and months (e.g. '6-4-2020' instead of '06-04-2020')?\n3. Should the function handle years before a certain year as valid, or should it consider only current years and future years as valid input?\n4. Should the function consider the range of years that are valid inputs for validation?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: dd-mm-yyyy or mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => False\n\n    valid_date('15-01-2012') => True\n\n    valid_date('04-0-2040') => True\n\n    valid_date('06-04-2020') => False\n\n    valid_date('06/04/2020') => True\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "1. Should the function consider leap years for February when validating the date? \n         2. Should the function accept dates with single-digit days and months (e.g. '6-4-2020' instead of '06-04-2020')? \n         3. Should the function consider the range of years that are valid inputs for validation?", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/32", "Modification Type": "prompt1a", "First Model Response": "What should be the behavior if the list xs has an odd number of coefficients?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef candidate(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    candidate find x such that poly(x) is positive or negative or 0.\n    candidate returns only only zero point, even if there are many.\n    Moreover, candidate only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(candidate([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(candidate([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The behavior should be that it returns the largest non-zero coefficient.\"\"\"", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/82", "Modification Type": "prompt2cp", "First Model Response": "1. Can the input string contain spaces or special characters?\n2. Should the function return True only for single-letter strings?\n3. Should the function consider the length of the string as a prime number or not?\n4. If the length of the string is prime, should the function return True regardless of the characters in the string?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef prime_length(string):\n    \"\"\"\n    Examples\n    prime_length('Hello') == False\n    prime_length('abcdcba') == False\n    prime_length('kittens') == False\n    prime_length('orange') == True\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "Evaluator Quality Score": "1", "Evaluator Answer": "Empty", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/119", "Modification Type": "prompt1a", "First Model Response": "```python\ndef candidate(lst):\n    # concatenate the two strings\n    combined = lst[0] + lst[1]\n    \n    # create a stack to keep track of parentheses\n    stack = []\n    \n    # iterate through the combined string\n    for char in combined:\n        if char == '(':\n            stack.append(char)\n        else:\n            # check if stack is empty\n            if not stack:\n                return 'No'\n            stack.pop()\n    \n    # check if stack is empty\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(candidate(['()(', ')']))  # Output: 'Yes'\nprint(candidate([')', ')']))    # Output: 'No'\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/158", "Modification Type": "prompt1c", "First Model Response": "What should be returned if the input list of strings is empty?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"of\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"name\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"bb\"\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "No questions", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/10", "Modification Type": "prompt1p", "First Model Response": "What should be the behavior of the `make_palindrome` function when the input string is already a palindrome?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "There are no clarifying questions", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/114", "Modification Type": "prompt1a", "First Model Response": "Is it correct to assume that the product of an empty sub-array is 1?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum product or sum of any non-empty sub-array\n    of nums.\n    Example\n    candidate([2, 3, 4, 1, 2, 4]) == 1\n    candidate([-1, -2, -3]) == -6\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "There is no need to assume the product of an empty sub-array is 1 as the original problem description specifies finding the minimum sum, not the product.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/69", "Modification Type": "prompt2ap", "First Model Response": "Clarifying questions:\n1. Should the function return both the smallest and greatest integer that meets the criteria, or just one of them?\n2. What should be returned if there are multiple integers that meet the criteria (smallest or greatest with a frequency)?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the smallest or greatest integer that is greater than \n    zero, and has a frequency. \n    '''", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "Evaluator Quality Score": "2", "Evaluator Answer": "There are no clarifying questions.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/112", "Modification Type": "prompt2ap", "First Model Response": "What should be the expected output if the result string after deleting characters from s is empty? \nShould the comparison between characters be case-sensitive or case-insensitive?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are greater than or equal to any character in c\n    then check if the result string is .\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "The expected output if the result string after deleting characters from s is empty should be an empty string. The comparison between characters should be case-sensitive.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/111", "Modification Type": "prompt1a", "First Model Response": "```python\ndef histogram(test):\n    histogram_dict = {}\n    test_list = test.split()\n    \n    for letter in test_list:\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    \n    max_count = max(histogram_dict.values())\n    min_count = min(histogram_dict.values())\n    \n    max_letters = [key for key, value in histogram_dict.items() if value == max_count]\n    min_letters = [key for key, value in histogram_dict.items() if value == min_count]\n    \n    return {k: v for k, v in histogram_dict.items() if v == max_count or v == min_count}\n\n# Test cases\nprint(histogram('a b c')) # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a')) # {'a': 2, 'b': 2}\nprint(histogram('a b c a b')) # {'a': 2, 'b': 2}\nprint(histogram('b b b b a')) # {'b': 4}\nprint(histogram('')) # {}\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/163", "Modification Type": "prompt1a", "First Model Response": "Clarifying questions:\n1. Should the input integers a and b be included in the list if they are odd or even?\n2. If both a and b are odd/even, should the list include both numbers or exclude them?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the odd or even digits between a\n    and b, in descending or ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "1. Include the input integers a and b in the list if they are odd or even.\n2. Include both numbers if both a and b are odd/even.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/128", "Modification Type": "prompt2ac", "First Model Response": "What should be returned if the sum of signs is 0?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by sum or product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == 1\n    >>> prod_signs([0, 1]) == 1\n    >>> prod_signs([]) == None\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "To recover the modified requirements in the original problem description, the answer is:\n- What should be returned if the sum of signs is 0?", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/76", "Modification Type": "prompt2ac", "First Model Response": "```python\ndef candidate(a, b):\n    if a == 1:\n        return True\n    elif b == 1:\n        return True\n    elif a % b == 0 and b % a != 0:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(candidate(1, 4))  # Output: True\nprint(candidate(2, 2))  # Output: True\nprint(candidate(8, 2))  # Output: False\nprint(candidate(3, 2))  # Output: False\nprint(candidate(3, 1))  # Output: True\nprint(candidate(5, 3))  # Output: True\n```\nNote: The provided solution is based on the requirement that x is a simple power of n if n**int=x.\nIf there's a specific definition for the term \"power of n\" in this context, the condition in the function can be updated accordingly.", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/133", "Modification Type": "prompt1a", "First Model Response": "```python\nimport math\n\ndef candidate(lst):\n    total = 0\n    for num in lst:\n        rounded = math.ceil(num)\n        total += rounded ** 2\n    return total\n\n# Test cases\nprint(candidate([1,2,3]))  # Output: 14\nprint(candidate([1,4,9]))  # Output: 98\nprint(candidate([1,3,5,7]))  # Output: 84\nprint(candidate([1.4,4.2,0]))  # Output: 29\nprint(candidate([-2.4,1,1]))  # Output: 6\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/161", "Modification Type": "prompt1c", "First Model Response": "What should be the behavior if s contains only spaces?\nShould the non-alphabetic but non-space special characters also remain unchanged or be reversed as well?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"1234\"\n    solve(\"ab\") = \"ab\"\n    solve(\"#a@C\") = \"#a@C\"\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The behavior if `s` contains only spaces is that the spaces should be preserved and the resulting string should be the reversed spaces. Non-alphabetic special characters should also remain unchanged.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/6", "Modification Type": "prompt1a", "First Model Response": "Questions for clarification:\n1. Are the parentheses always balanced and valid?\n2. What characters separate the groups of nested parentheses?\n3. Are there any restrictions on the characters that can be used in the input string?\n4. Should the function consider white spaces as part of the input string?\n5. Should the function output an empty list for an empty input string?\n6. Can we assume that the groups are always enclosed in parentheses?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\nfrom typing import List\n\n\ndef candidate(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by certain characters.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> candidate('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "No clarifying questions needed as the original and modified descriptions match perfectly.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 2, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 2, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/40", "Modification Type": "prompt1a", "First Model Response": "What specific condition should the three elements in the list satisfy in order for the function to return True?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(l: list):\n    \"\"\"\n    candidate takes a list of integers as an input.\n    it returns True if there are three elements in a list that\n    sum to zero and meet a certain condition (such as they are distinct, they are odd, they are prime, or another condition), and False otherwise.\n\n    >>> candidate([1, 3, 5, 0])\n    False\n    >>> candidate([1, 3, -2, 1])\n    True\n    >>> candidate([1, 2, 3, 7])\n    False\n    >>> candidate([2, 4, -5, 3, 9, 7])\n    True\n    >>> candidate([1])\n    False\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The specific condition that the three elements in the list should satisfy in order for the function to return True is that they sum to zero and are distinct elements.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/115", "Modification Type": "prompt1c", "First Model Response": "```python\ndef max_fill(grid, capacity):\n    max_height = max(map(sum, grid))\n    return math.ceil(max_height / capacity)\n\n# Test cases\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)) # Output: 3\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)) # Output: 2\nprint(max_fill([[0,0,0], [0,0,0]], 5)) # Output: 3\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/17", "Modification Type": "prompt1a", "First Model Response": "```python\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    result = []\n    \n    for note in notes:\n        result.append(beats[note])\n    \n    return result\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/12", "Modification Type": "prompt1a", "First Model Response": "What criteria should be used to determine which string to return? (e.g., shortest, longest, alphabetical, etc.)", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\nfrom typing import List, Optional\n\n\ndef candidate(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return a certain one (the shortest or longest or another). Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> candidate([])\n\n    >>> candidate(['a', 'b', 'c'])\n    'a'\n    >>> candidate(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The original problem description specifies returning the longest string in the list. If there are multiple strings of the same length, return the first one. Return None if the input list is empty.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/127", "Modification Type": "prompt2ac", "First Model Response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(intersection((1, 2), (2, 3)))  # \"YES\"\nprint(intersection((-1, 1), (0, 4)))  # \"YES\"\nprint(intersection((-3, -1), (-5, 5)))  # \"NO\"\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/44", "Modification Type": "prompt1a", "First Model Response": "No questions", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(x: int, y: int):\n    \"\"\"Change numerical base of input number x or y to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> candidate(8, 3)\n    '22'\n    >>> candidate(8, 2)\n    '1000'\n    >>> candidate(7, 2)\n    '111'\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"", "Evaluator Quality Score": "1", "Evaluator Answer": "[]", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 1}, "note": "Final score decided by majority vote on [1, 1, 1].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/156", "Modification Type": "prompt1p", "First Model Response": "What should be the output if the input number is zero?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(number):\n    \"\"\"\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> candidate(19) == 'xix'\n    >>> candidate(152) == 'clii'\n    >>> candidate(426) == 'cdxxvi'\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "No clarifying questions needed, the original problem description can be recovered directly.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/95", "Modification Type": "prompt1c", "First Model Response": "```python\ndef check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    lower_keys = all(key.islower() for key in dict if isinstance(key, str))\n    upper_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lower_keys or upper_keys\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/132", "Modification Type": "prompt1c", "First Model Response": "", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Empty Response", "final_score": "", "agent_votes": {}, "note": "Evaluation skipped because response was classified as 'Empty Response'."}}
{"ID": "HumanEval/29", "Modification Type": "prompt1c", "First Model Response": "What should be the behavior if the input list contains strings that exactly match the prefix provided?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['bcd', 'cde']\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "What should be the behavior if the input list contains strings that exactly match the prefix provided?", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/62", "Modification Type": "prompt1c", "First Model Response": "What should be returned if the derivative is a constant term (ex. 4, same as [4])?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [20, 12, 4, 1]\n    >>> derivative([1, 2, 3])\n    [6, 2]\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "Return the constant term as is, e.g., [4] should be returned as [4].", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/138", "Modification Type": "prompt1p", "First Model Response": "Questions to ask for clarification:\n1. Are negative numbers allowed as input?\n2. Should the output be a boolean (True/False) or the actual combinations that give the sum if it is possible?\n3. Do we consider 0 as an even number?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 \n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "1. Are negative numbers allowed as input? No, the description specifies that the numbers should be positive.\n2. Should the output be a boolean (True/False) or the actual combinations that give the sum if it is possible? The output should be a boolean, as shown in the examples.\n3. Do we consider 0 as an even number? The description does not mention 0; therefore, it is unclear whether 0 should be considered an even number.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/56", "Modification Type": "prompt1c", "First Model Response": "Clarifying questions:\n1. Can a closing bracket appear before its corresponding opening bracket?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    True\n    >>> correct_bracketing(\"<>\")\n    False\n    >>> correct_bracketing(\"<<><>>\")\n    False\n    >>> correct_bracketing(\"><<>\")\n    True\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "No clarifying questions", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/140", "Modification Type": "prompt1c", "First Model Response": "Clarifying questions:\n1. What should be the output if the input string starts with a space character?\n2. Is it possible for the input string to end with a space character?\n3. Should the function be case-sensitive when replacing spaces?\n4. Should we consider other whitespace characters, such as tabs or newlines?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"_Example\"\n    fix_spaces(\"Example 1\") == \"Example-1\"\n    fix_spaces(\" Example 2\") == \"-Example-2\"\n    fix_spaces(\" Example   3\") == \"-Example_3\"\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "1. The output should not have a leading underscore if the input string starts with a space character.\n2. It is possible for the input string to end with a space character.\n3. The function should be case-sensitive when replacing spaces.\n4. We should only consider spaces and not other whitespace characters.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/136", "Modification Type": "prompt1c", "First Model Response": "```python\ndef largest_smallest_integers(lst):\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    return (max(neg, default=None), min(pos, default=None))\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 2)\nprint(largest_smallest_integers([]))  # Output: (None, None)\nprint(largest_smallest_integers([0]))  # Output: (None, None)\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/56", "Modification Type": "prompt1a", "First Model Response": "Are there any constraints on the value of K, the number of closing brackets required for each opening bracket?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening brackets have K corresponding closing brackets.\n\n    >>> candidate(\"<\")\n    False\n    >>> candidate(\"<>\")\n    True\n    >>> candidate(\"<<><>>\")\n    True\n    >>> candidate(\"><<>\")\n    False\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "There are no constraints mentioned in the modified problem description on the value of K for the number of closing brackets required for each opening bracket.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/143", "Modification Type": "prompt2cp", "First Model Response": "```python\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    return words[-1]\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/79", "Modification Type": "prompt1a", "First Model Response": "What should be the output if the input number is 0?\nIs there a limit to the size of the input number?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1' or '2'.\n\n    There will be an extra couple of characters 'db' at different positions (start, or middle, or end) of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    candidate(15)   # returns \"db1111db\"\n    candidate(32)   # returns \"db100000db\"\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "There should not be any '2' in the output. The extra characters 'db' should be present at the beginning and end of the string only. There is no limit specified for the size of the input number.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/84", "Modification Type": "prompt1c", "First Model Response": "", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Empty Response", "final_score": "", "agent_votes": {}, "note": "Evaluation skipped because response was classified as 'Empty Response'."}}
{"ID": "HumanEval/49", "Modification Type": "prompt2ac", "First Model Response": "What should be done in situations where y is 0?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(x: int, y: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> candidate(3, 5)\n    5\n    >>> candidate(1101, 101)\n    101\n    >>> candidate(0, 101)\n    101\n    >>> candidate(3, 11)\n    11\n    >>> candidate(100, 101)\n    101\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"", "Evaluator Quality Score": "1", "Evaluator Answer": "No questions", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/119", "Modification Type": "prompt1p", "First Model Response": "What is the definition of a \"good\" string in this context?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    '''", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''", "Evaluator Quality Score": "3", "Evaluator Answer": "In the original problem description, a \"good\" string is defined as a string where all parentheses are balanced.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/83", "Modification Type": "prompt1p", "First Model Response": "What defines an n-digit positive integer in this context?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "The original problem description was modified to remove the requirement of the numbers starting or ending with 1.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/99", "Modification Type": "prompt1a", "First Model Response": "What should be the output if the input value contains non-numeric characters or symbols?\nWhat should be the output if the input is an empty string?\nShould the function handle decimal inputs as well?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the farthest or closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> candidate(\"10\")\n    10\n    >>> candidate(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example candidate(\"14.5\") should\n    return 15 and candidate(\"-14.5\") should return -15.\n    '''", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''", "Evaluator Quality Score": "3", "Evaluator Answer": "No questions", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/67", "Modification Type": "prompt2ac", "First Model Response": "What types of fruits can be present in the basket other than apples and oranges?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of a certain type of fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 6 = 13\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 = 3\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 = 98\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 = 20\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The types of fruits that can be present in the basket other than apples and oranges are mango fruits.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/82", "Modification Type": "prompt1a", "First Model Response": "Clarifying questions:\n1. What specific condition should the string length meet in order for the function to return True?\n2. Are there any examples of specific conditions that should be checked for the string length?\n3. Should the function return False for all other cases, or only when the condition is not met?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length meets a certain condition (e.g. is an even or prime number or another type) or False otherwise\n    Examples\n    candidate('Hello') == True\n    candidate('abcdcba') == True\n    candidate('kittens') == True\n    candidate('orange') == False\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The string length should meet the condition of being an even or prime number. The function should return False only when this condition is not met.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/66", "Modification Type": "prompt1a", "First Model Response": "What should be the behavior if the input string contains characters other than uppercase letters?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the number of upper characters.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The behavior should ignore any characters that are not uppercase letters and only consider the ASCII codes of uppercase characters for the sum.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/98", "Modification Type": "prompt1p", "First Model Response": "What exactly is meant by \"count the number of uppercase vowels\"? Are we looking to count the occurrences of individual uppercase vowels within the string or looking for the total count of all uppercase vowels combined?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in \n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "To recover the modified requirements: The modified description is counting the number of uppercase vowels in even indices of the string.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/163", "Modification Type": "prompt1p", "First Model Response": "1. Should the function include both a and b in the range of integers to consider? \n2. Are both a and b included in the set of positive integers or are they exclusive?\n3. Should the function return a list of the even digits between a and b, or the count of even digits, or something else?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "No clarifying questions needed as the original problem description is clear on what needs to be done.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 1, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 1, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/88", "Modification Type": "prompt2ap", "First Model Response": "What should be the sorting algorithm used to sort the array?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd or even,\n    or sort it\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "To clarify, should the array be sorted in ascending order if the sum of the first and last index values is odd and sorted in descending order if the sum is even?", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/60", "Modification Type": "prompt2ac", "First Model Response": "What numbers should be summed up - all integers from 1 to n or only specific numbers within a range?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(n: int):\n    \"\"\"candidate is a function that sums up all numbers.\n    >>> candidate(30)\n    465\n    >>> candidate(100)\n    10100\n    >>> candidate(5)\n    30\n    >>> candidate(10)\n    110\n    >>> candidate(1)\n    2\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The numbers should be summed up from 1 to n", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [3, 3, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/112", "Modification Type": "prompt2ac", "First Model Response": "```python\ndef reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if all(ord(char) < ord(char2) for char2 in c):\n            result += char\n    return (result, result == result[::-1])\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Classification Failed", "final_score": "", "agent_votes": {}, "note": "Evaluation skipped because response was classified as 'Classification Failed'."}}
{"ID": "HumanEval/47", "Modification Type": "prompt1p", "First Model Response": "What specific operation needs to be performed on the elements in the list l?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(l: list):\n    \"\"\"Return of elements in the list l.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The specific operation that needs to be performed on the elements in the list l is to return the median value.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/123", "Modification Type": "prompt1a", "First Model Response": "```python\ndef get_odd_collatz(n):\n    def collatz(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n\n    collatz_seq = collatz(n)\n    odd_numbers = sorted(list(set([x for x in collatz_seq if x % 2 != 0])))\n    return odd_numbers\n\n# Test the function\nprint(get_odd_collatz(5))\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/75", "Modification Type": "prompt1c", "First Model Response": "What should the function return if the input number is 1?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == False\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "There are no clarifying questions", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/50", "Modification Type": "prompt1c", "First Model Response": "What should be done for non-alphabetic characters like spaces or special characters when encoding and decoding?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function which shifts every character by 3. Returns decoded string.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The question helped recover the fact that the original problem mentioned shifting every character by 5 in the alphabet during encoding and decoding, which was missing in the modified description.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 1}, "note": "Final score decided by majority vote on [2, 2, 1].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/16", "Modification Type": "prompt2ac", "First Model Response": "What should be the expected output if the input string is empty?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(string: str) -> int:\n    \"\"\" Given a string, find out how many characters (regardless of case) does it consist of\n    >>> candidate('xyzXYZ')\n    6\n    >>> candidate('Jerry')\n    5\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The expected output if the input string is empty should be 0.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/106", "Modification Type": "prompt1c", "First Model Response": "What should be done if the input value of n is less than or equal to 0?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [15, 24, 6, 2, 1]\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"", "Evaluator Quality Score": "1", "Evaluator Answer": "No clarifying questions", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/110", "Modification Type": "prompt1a", "First Model Response": "```python\ndef exchange(lst1, lst2):\n    if all(x % 2 == 0 for x in lst1) or all(x % 2 != 0 for x in lst1):\n        return \"YES\"\n    return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # YES\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # NO\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/63", "Modification Type": "prompt3acp", "First Model Response": "Are there any additional constraints on the input value of `n` apart from it being an integer?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    Please write a function to efficiently compute an element of the fibfib number sequence.\n    >>> fibfib(1)\n    1\n    >>> fibfib(5)\n    5\n    >>> fibfib(8)\n    21\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The additional constraints on the input value of `n` is that it has to be a non-negative integer.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/67", "Modification Type": "prompt1c", "First Model Response": "What should be returned if the input string does not contain any information about mangoes?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 6 = 13\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 = 3\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 = 98\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 = 20\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "To recover the modified requirements, it should be clarified that if the input string does not contain any information about mangoes, the function should return 0 mangoes in the basket.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/35", "Modification Type": "prompt1c", "First Model Response": "What should be the output if the input list is empty?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    1\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The output should be None if the input list is empty.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/87", "Modification Type": "prompt1a", "First Model Response": "```python\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result)\n\n# Test the function\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/157", "Modification Type": "prompt1a", "First Model Response": "Is there a restriction on the values of the lengths of sides a, b, and c? For example, are negative values allowed or should they be integers?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an acute-angled or right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    candidate(3, 4, 5) == True\n    candidate(1, 2, 3) == False\n    '''", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "Evaluator Quality Score": "1", "Evaluator Answer": "", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/23", "Modification Type": "prompt2ap", "First Model Response": "What is the definition of a palindrome substring in this context: does it need to be a perfect palindrome (reads the same forwards and backwards) or only approximately a palindrome?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(string: str) -> int:\n    \"\"\" Return length or length of Longest Palindrome Substring\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The original problem description was to generate Python code to find the length of the longest palindrome substring in a given string.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/141", "Modification Type": "prompt2cp", "First Model Response": "What are the specific conditions for a file name to be considered valid?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    Examples:\n    file_name_check(\"example.txt\") # => 'No'\n    file_name_check(\"1example.dll\") # => 'Yes' (the name should start with a latin alphapet letter)\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The specific conditions for a file name to be considered valid are:\n1. There should not be more than three digits ('0'-'9') in the file's name.\n2. The file's name contains exactly one dot '.'.\n3. The substring before the dot should not be empty, and it starts with a letter from the latin alphabet ('a'-'z' and 'A'-'Z').\n4. The substring after the dot should be one of these: ['txt', 'exe', 'dll'].", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [3, 3, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/157", "Modification Type": "prompt1p", "First Model Response": "What is the expected output of the function `candidate` when given the sides of the triangle? \nShould the function return True if the triangle is a right-angled triangle, and False if it is not? \nHow are the side lengths represented in the input variables a, b, and c?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "Evaluator Quality Score": "3", "Evaluator Answer": "The expected output of the function `candidate` should be True if the triangle is a right-angled triangle and False if it is not. \nThe side lengths are represented in the input variables `a`, `b`, and `c`.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/153", "Modification Type": "prompt1a", "First Model Response": "```python\ndef Extension(class_name, extensions):\n    max_strength = -(float('inf'))\n    min_strength = float('inf')\n    max_extension = \"\"\n    min_extension = \"\"\n\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            max_extension = extension\n        if strength < min_strength:\n            min_strength = strength\n            min_extension = extension\n\n    if max_strength == min_strength:\n        return f\"{class_name}.{extensions[0]}\"\n    else:\n        return f\"{class_name}.{max_extension if abs(max_strength) > abs(min_strength) else min_extension}\"\n\n# Test cases\nprint(Extension('my_class', ['AA', 'Be', 'CC']))  # Output: my_class.AA\nprint(Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: Slices.SErviNGSliCes\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/161", "Modification Type": "prompt2ac", "First Model Response": "Is the transformation for the string containing no letters specified in the problem description, or can it be any transformation as long as it does not involve changing the case of any letters?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, perform some transformation.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"1234\"\n    solve(\"ab\") = \"ab\"\n    solve(\"#a@C\") = \"#a@C\"\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The transformation for the string containing no letters is to reverse the string instead of keeping it as is.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 2, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 2, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/11", "Modification Type": "prompt2ac", "First Model Response": "```python\ndef candidate(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' or b[i] == '1':\n            result += '1'\n        else:\n            result += '0'\n    return result\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/60", "Modification Type": "prompt1p", "First Model Response": "What specific numbers should be summed together?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(n: int):\n    \"\"\"candidate is a function that sums numbers.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The specific numbers that should be summed together are from 1 to the given input n.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/6", "Modification Type": "prompt2ap", "First Model Response": "What exact output is expected for each group of nested parentheses?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\nfrom typing import List\n\n\ndef candidate(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by certain characters.\n    For each of the group, output an integer\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"", "Evaluator Quality Score": "1", "Evaluator Answer": "There are no clarifying questions provided in the response.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [2, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/93", "Modification Type": "prompt1p", "First Model Response": "What should be done with non-letter characters in the message?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears \n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "The non-letter characters should be left unchanged in the encoded message.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 2, "Deepseek-v3": 1}, "note": "Final score decided by majority vote on [1, 2, 1].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/159", "Modification Type": "prompt1p", "First Model Response": "What are the data types of the 'number', 'need', and 'remaining' parameters?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "Variables:\n@number : integer\n        the number of carrots that you have eaten.\n@need : integer\n        the number of carrots that you need to eat.\n@remaining : integer\n        the number of remaining carrots thet exist in stock", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [1, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/50", "Modification Type": "prompt1p", "First Model Response": "```python\n    for i in range(1, 26):\n        decoded = \"\".join([chr(((ord(ch) - i - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n        print(f\"Candidate text with shift -{i}: {decoded}\")\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/41", "Modification Type": "prompt1c", "First Model Response": "def count_collisions(cars: int) -> int:\n    return cars*(cars-1)//2\n\n# Test the function\nprint(count_collisions(5))  # Output: 10\nprint(count_collisions(1))  # Output: 0\nprint(count_collisions(10)) # Output: 45", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef is_prime(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "The modified problem description is about counting the number of car collisions on a road with cars moving in opposite directions.", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/48", "Modification Type": "prompt1a", "First Model Response": "What is the definition or criteria for an Isogram?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(text: str):\n    \"\"\"\n    Checks if given string is an Isogram/Palindrome or not \n    >>> candidate('')\n    True\n    >>> candidate('aba')\n    True\n    >>> candidate('aaaaa')\n    True\n    >>> candidate('zbcd')\n    False\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The definition of an Isogram is a word with no repeating letters.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 3, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 3, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/90", "Modification Type": "prompt1a", "First Model Response": "```python\ndef next_smallest(lst):\n    if len(lst) < 3:\n        return None\n    return sorted(set(lst))[2]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # 2\nprint(next_smallest([]))  # None\nprint(next_smallest([1, 1]))  # None\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/72", "Modification Type": "prompt1c", "First Model Response": "", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Empty Response", "final_score": "", "agent_votes": {}, "note": "Evaluation skipped because response was classified as 'Empty Response'."}}
{"ID": "HumanEval/130", "Modification Type": "prompt1p", "First Model Response": "Are there any constraints on the input value of n?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"", "Evaluator Quality Score": "1", "Evaluator Answer": "N/A", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/11", "Modification Type": "prompt1a", "First Model Response": "```python\ndef candidate(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '0'\n        else:\n            result += '1'\n    return result\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/112", "Modification Type": "prompt1a", "First Model Response": "```python\ndef reverse_delete(s,c):\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    s_filtered = ''.join([char for char in s if all(c_char > char for c_char in c)])\n    \n    return (s_filtered, is_palindrome(s_filtered))\n    \n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\")) # ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\")) # ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\")) # ('cdedc', True)\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/123", "Modification Type": "prompt1p", "First Model Response": "```python\ndef get_odd_collatz(n):\n    def collatz(num):\n        if num % 2 == 0:\n            return num / 2\n        else:\n            return 3 * num + 1\n    \n    result = []\n    while n != 1:\n        n = collatz(n)\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/119", "Modification Type": "prompt2ac", "First Model Response": "What should be returned if the input list is empty?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to choose one from or concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    candidate(['()(', ')']) == 'No'\n    candidate([')', ')']) == 'Yes'\n    '''", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''", "Evaluator Quality Score": "3", "Evaluator Answer": "What should be returned if the input list is empty?", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 1}, "note": "Final score decided by majority vote on [1, 1, 1].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/3", "Modification Type": "prompt1c", "First Model Response": "```python\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# test the function\nprint(below_zero([1, 2, 3]))  # True\nprint(below_zero([1, 2, -4, 5]))  # False\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/89", "Modification Type": "prompt2ac", "First Model Response": "What should happen with non-alphabetic characters in the input string?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by three or two multiplied to three or two places.\n    For example:\n    encrypt('hi') returns 'kl'\n    encrypt('asdfghjkl') returns 'cvfiknqrs'\n    encrypt('gf') returns 'ji'\n    encrypt('et') returns 'gv'\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "To encrypt non-alphabetic characters, such as numbers or special characters, they should be left unchanged in the output string.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/134", "Modification Type": "prompt1c", "First Model Response": "", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Empty Response", "final_score": "", "agent_votes": {}, "note": "Evaluation skipped because response was classified as 'Empty Response'."}}
{"ID": "HumanEval/121", "Modification Type": "prompt1a", "First Model Response": "What should be the output if the input list is empty?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the even or odd elements that are in even or odd positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The output should be 0 if the input list is empty.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 1}, "note": "Final score decided by majority vote on [1, 1, 1].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/10", "Modification Type": "prompt2ac", "First Model Response": "```python\ndef candidate(string: str) -> str:\n    if not string:\n        return ''\n    palin = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[-i:]):\n            palin = string[-i:]\n            break\n    return string + string[:len(string) - len(palin)][::-1]\n       \ndef is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/146", "Modification Type": "prompt1p", "First Model Response": "What is the special condition under which a number in the array should be considered in the filter?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input.\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The special condition is that the number should have both the first and last digits odd to be considered in the filter.", "Improved_Evaluation_Result": {"final_score": 3, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 3, "Deepseek-v3": 3}, "note": "Final score decided by majority vote on [3, 3, 3].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/18", "Modification Type": "prompt2ap", "First Model Response": "What should be the expected output when the substring is not found in the original string?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(a: str, b: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The expected output when the substring is not found in the original string should be 0.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/145", "Modification Type": "prompt1p", "First Model Response": "What should be the behavior of the function when the input list contains negative numbers?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef candidate(nums):\n    \"\"\"\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> candidate([]) == []\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The behavior of the function when the input list contains negative numbers should be to sort them based on the sum of their digits in ascending order and if the sum is the same, maintain the original order from the input list.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/106", "Modification Type": "prompt1a", "First Model Response": "```python\ndef f(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        return num * factorial(num - 1)\n\n    def factorial_or_sum(i):\n        if i % 2 == 0:\n            return sum(range(1, i+1))\n        else:\n            return factorial(i)\n\n    return [factorial_or_sum(i) for i in range(1, n+1)]\n\n# Test the function\nprint(f(5))  # Output: [1, 2, 6, 24, 15]\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/57", "Modification Type": "prompt1p", "First Model Response": "Questions to ask for clarifications:\n1. Are we supposed to return `True` if the list is sorted in ascending order, and `False` otherwise?\n2. Should we include the case where the list is sorted in descending order as `False` or `True`?\n3. Can the list contain duplicate elements?\n4. Is the input list always non-empty?\n5. Are negative numbers allowed in the list?\n6. Do we consider a list of length 1 as sorted or not sorted?\n7. Are there any performance requirements we need to consider?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(l: list):\n    \"\"\"\n    >>> candidate([1, 2, 4, 20])\n    True\n    >>> candidate([1, 20, 4, 10])\n    False\n    >>> candidate([4, 1, 0, -10])\n    True\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "1. Yes\n2. Include it as `False`\n3. Yes\n4. No\n5. Yes\n6. Yes\n7. No", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 3, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 3, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/142", "Modification Type": "prompt1a", "First Model Response": "What should be done if the index of an entry is a multiple of both 3 and 4?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall cube or square the integer entry if its index is a \n    multiple of 3 and will cube or square the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "To handle entries with indexes that are a multiple of both 3 and 4, a clarification could be made on whether to cube or square the integer entry.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [3, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/27", "Modification Type": "prompt1p", "First Model Response": "What should be done with non-alphabetic characters in the string?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef candidate(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The non-alphabetic characters should not be modified.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/143", "Modification Type": "prompt1a", "First Model Response": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) % 2 == 0 or is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\n# Test cases\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\"\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/65", "Modification Type": "prompt2ac", "First Model Response": "```python\ndef circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    if shift > len(x_str) // 2:\n        return x_str[::-1]\n    \n    left = x_str[shift:] + x_str[:shift]\n    right = x_str[-shift:] + x_str[:-shift]\n    \n    return left if shift <= len(x_str) // 2 else right\n\n# Example test cases\nprint(circular_shift(12, 1))  # Output: \"12\"\nprint(circular_shift(12, 2))  # Output: \"21\"\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
{"ID": "HumanEval/64", "Modification Type": "prompt1a", "First Model Response": "Can the input string contain both lowercase and uppercase characters?\nDo we consider whitespace characters as characters to count?\nAre we only counting characters and vowels i.e., should we ignore any other non-alphabet characters?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef candidate(s):\n    \"\"\"Write a function candidate which takes a string representing\n    a word as input and returns the number of characters or vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> candidate(\"abcde\")\n    2\n    >>> candidate(\"ACEDY\")\n    3\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The input can contain both lowercase and uppercase characters.\nYes, whitespace characters are counted.\nWe should ignore any other non-alphabet characters.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/78", "Modification Type": "prompt1p", "First Model Response": "### Clarifying questions:\n1. Are we only considering hexadecimal numbers in uppercase?\n2. Can we assume that the input `num` will always be a valid hexadecimal string?\n3. Do we need to handle any special cases, like an empty string or a string with leading zeroes?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "1. Hexadecimal numbers can be in any case, not just uppercase. \n2. We need to check if the hexadecimal digit is a prime number (2, 3, 5, 7, B, D). \n3. Are we counting all occurrences of prime digits, or just unique occurrences?", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/2", "Modification Type": "prompt1p", "First Model Response": "What should be returned if the input number is negative?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n        \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"", "Evaluator Quality Score": "3", "Evaluator Answer": "The function should return the decimal part of the input floating point number if it is positive.", "Improved_Evaluation_Result": {"final_score": 1, "agent_votes": {"GPT-4o": 1, "Claude-Sonnet-4": 1, "Deepseek-v3": 1}, "note": "Final score decided by majority vote on [1, 1, 1].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/116", "Modification Type": "prompt1p", "First Model Response": "What should be the sorting criteria if the number of ones in two integers is the same?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their \n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "What should be the sorting criteria if the number of ones in two integers is the same?", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 3, "Claude-Sonnet-4": 2, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [3, 2, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/51", "Modification Type": "prompt1p", "First Model Response": "What should be done with upper case vowels? Should they also be removed or kept as is?", "Modified Description": "Generate Python code directly (Markdown) to solve the coding problem. \n\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without.\n    \"\"\"", "Original Description": "You are an expert software developer who writes high quality code. With below information, please either generate Python3 code (Respond directly with code only with markdown), or ask clarifying questions: \n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"", "Evaluator Quality Score": "2", "Evaluator Answer": "The upper case vowels should also be removed along with the lower case vowels.", "Improved_Evaluation_Result": {"final_score": 2, "agent_votes": {"GPT-4o": 2, "Claude-Sonnet-4": 1, "Deepseek-v3": 2}, "note": "Final score decided by majority vote on [2, 1, 2].", "classification": "Clarifying Question"}}
{"ID": "HumanEval/63", "Modification Type": "prompt1a", "First Model Response": "```python\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24\n```", "Modified Description": "", "Original Description": "", "Evaluator Quality Score": "", "Evaluator Answer": "", "Improved_Evaluation_Result": {"classification": "Code Solution", "final_score": "", "agent_votes": {}, "note": "Response classified as a code solution; evaluation bypassed to prevent false recovery."}}
